{"version":3,"sources":["components/card/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","description","item","title","id","raiting","urlToImage","className","src","alt","App","news","json","articles","useState","card","setCard","renderNews","slice","useEffect","window","addEventListener","handleScroll","removeEventListener","e","target","documentElement","scrollHeight","scrollTop","innerHeight","onClick","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"684FAyBeA,MAtBf,SAAcC,GACZ,IAAMC,EAAcD,EAAME,KAAKD,YACzBE,EAAQH,EAAME,KAAKC,MACnBC,EAAKJ,EAAME,KAAKE,GAChBC,EAAUL,EAAME,KAAKG,QACrBC,EAAaN,EAAME,KAAKI,WAE9B,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKC,IAAKF,EAAYG,IAAI,qDAC1B,oBAAIF,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,oBAAd,SAAmCN,IACnC,sBAAKM,UAAU,aAAf,UACE,6GAAoBH,KACpB,8EAAcC,Y,eC+BPK,MA3Cf,WACE,IAAMC,EAAOC,EAAKC,SACZV,EAAQS,EAAKT,MACbC,EAAKQ,EAAKR,GACVC,EAAUO,EAAKP,QACfC,EAAaM,EAAKN,WAGxB,EAAwBQ,mBAFL,IAEnB,mBAAOC,EAAP,KAAaC,EAAb,KACIC,EAAU,sBAAON,EAAKO,MAAM,EAHb,KAGL,YAAqCP,EAAKO,MAHrC,GAGuDH,KAI1EI,qBAAU,WAER,OADAC,OAAOC,iBAAiB,SAAUC,GAC3B,kBAAMF,OAAOG,oBAAoB,SAAUD,MAEjD,CAACP,IAIJ,IAAMO,EAAe,SAACE,GAChBA,EAAEC,OAAOC,gBAAgBC,cAAgBH,EAAEC,OAAOC,gBAAgBE,UAAYR,OAAOS,aAAe,KACtGb,EAAQD,EAAO,IAKnB,OACE,sBAAKR,UAAU,MAAf,UACE,4EACA,oSACA,wBAAQuB,QAAS,kBAAMd,EAAQD,EAAO,IAAtC,+GACA,qBAAKR,UAAU,UAAf,SACGU,EAAWc,KAAI,SAAC7B,EAAM8B,GAAP,OACd,cAAC,EAAD,CAAkB9B,KAAMA,EAAME,GAAIA,EAAIC,QAASA,EAASF,MAAOA,EAAOG,WAAYA,GAAvE0B,YC5BNC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e81c5a19.chunk.js","sourcesContent":["import './card.css';\r\n\r\n\r\nfunction Card(props) {\r\n  const description = props.item.description\r\n  const title = props.item.title\r\n  const id = props.item.id\r\n  const raiting = props.item.raiting\r\n  const urlToImage = props.item.urlToImage\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={urlToImage} alt=\"картинка\" />\r\n      <h4 className=\"card__title\">{title}</h4>\r\n      <h5 className=\"card__description\">{description}</h5>\r\n      <div className=\"card__span\">\r\n        <h6>Номер новости: {id}</h6>\r\n        <h6>Рейтинг: {raiting}</h6>\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import Card from './components/card/Card'\r\nimport './App.css';\r\nimport json from './news.json'\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction App() {\r\n  const news = json.articles\r\n  const title = json.title\r\n  const id = json.id\r\n  const raiting = json.raiting\r\n  const urlToImage = json.urlToImage\r\n  const cardsSumma = 15 //количество рендеров карточек\r\n\r\n  const [card, setCard] = useState(cardsSumma);\r\n  let renderNews = [...news.slice(0, cardsSumma), ...news.slice(cardsSumma, card)]\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener(\"scroll\", handleScroll);\r\n    // eslint-disable-next-line\r\n  }, [card]);\r\n\r\n\r\n\r\n  const handleScroll = (e) => {\r\n    if (e.target.documentElement.scrollHeight - (e.target.documentElement.scrollTop + window.innerHeight) < 100) {\r\n      setCard(card + 1)\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Новости</h1>\r\n      <h3>Карточки добавляются по скроллу мыши или кнопкой</h3>\r\n      <button onClick={() => setCard(card + 1)}>Добавить карточки</button>\r\n      <div className=\"wrapper\">\r\n        {renderNews.map((item, index) =>\r\n          <Card key={index} item={item} id={id} raiting={raiting} title={title} urlToImage={urlToImage}/>\r\n        )}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}